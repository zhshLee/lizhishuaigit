#encoding=utf-8

import cv2
import numpy as np


class Tracker(object):
    '''
    ׷����ģ��,����׷��ָ��Ŀ��
    '''
    def __init__(self,tracker_type = "BOOSTING",draw_coord = True):
        '''
        ��ʼ��׷��������
        '''
        #���opencv�汾
        (major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')
        self.tracker_types = ['BOOSTING', 'MIL','KCF', 'TLD', 'MEDIANFLOW', 'GOTURN']
        self.tracker_type = tracker_type
        self.isWorking = False
        self.draw_coord = draw_coord
        #����׷����
        if int(minor_ver) < 3:
            self.tracker = cv2.Tracker_create(tracker_type)
        else:
            if tracker_type == 'BOOSTING':
                self.tracker = cv2.TrackerBoosting_create()
            if tracker_type == 'MIL':
                self.tracker = cv2.TrackerMIL_create()
            if tracker_type == 'KCF':
                self.tracker = cv2.TrackerKCF_create()
            if tracker_type == 'TLD':
                self.tracker = cv2.TrackerTLD_create()
            if tracker_type == 'MEDIANFLOW':
                self.tracker = cv2.TrackerMedianFlow_create()
            if tracker_type == 'GOTURN':
                self.tracker = cv2.TrackerGOTURN_create()
    def initWorking(self,frame,box):
        '''
        ׷����������ʼ��
        frame:��ʼ��׷�ٻ���
        box:׷�ٵ�����
        '''
        if not self.tracker:
            raise Exception("׷����δ��ʼ��")
        status = self.tracker.init(frame,box)
        if not status:
            raise Exception("׷����������ʼ��ʧ��")
        self.coord = box
        self.isWorking = True

    def track(self,frame):
        '''
        ����׷��
        '''
        message = None
        if self.isWorking:
            status,self.coord = self.tracker.update(frame)
            if True:
                message = {"coord":[((int(self.coord[0]), int(self.coord[1])),(int(self.coord[0] + self.coord[2]), int(self.coord[1] + self.coord[3])))]}
                if self.draw_coord:
                    p1 = (int(self.coord[0]), int(self.coord[1]))
                    p2 = (int(self.coord[0] + self.coord[2]), int(self.coord[1] + self.coord[3]))
                    cv2.rectangle(frame, p1, p2, (255,0,0), 2, 1)
                    message['msg'] = "is tracking"
        return frame,message

if __name__ == '__main__' :
    a = ['BOOSTING', 'MIL','KCF', 'TLD', 'MEDIANFLOW', 'GOTURN']
    tracker = Tracker(tracker_type="KCF")
    video = cv2.VideoCapture(0)
    ok, frame = video.read()
    bbox = cv2.selectROI(frame, False)
    tracker.initWorking(frame,bbox)
    while True:
        _,frame = video.read();
        if(_):
            a,item = tracker.track(frame);
            temp = np.array(item['coord'][0])
            cv2.imshow("track",frame)
            cv2.rectangle(frame,(temp[0][0],temp[0][1]),(temp[0][0]+temp[1][0],temp[0][1]+temp[1][1]),(255,0,0),2)
            k = cv2.waitKey(1) & 0xff
            if k == 27:
                break